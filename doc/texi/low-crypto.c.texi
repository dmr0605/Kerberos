@subheading shishi_randomize
@anchor{shishi_randomize}
@deftypefun {int} {shishi_randomize} (Shishi * @var{handle}, int @var{strong}, void * @var{data}, size_t @var{datalen})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{strong}: 0 iff operation should not block, non-0 for very strong randomness.

@var{data}: output array to be filled with random data.

@var{datalen}: size of output array.

Store cryptographically random data of given size in the provided
buffer.

@strong{Return value:} Returns @code{SHISHI_OK} iff successful.
@end deftypefun

@subheading shishi_crc
@anchor{shishi_crc}
@deftypefun {int} {shishi_crc} (Shishi * @var{handle}, const char * @var{in}, size_t @var{inlen}, char * @var{out[4]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{in}: input character array of data to checksum.

@var{inlen}: length of input character array of data to checksum.

Compute checksum of data using CRC32 modified according to RFC
1510.  The @code{out} buffer must be deallocated by the caller.

The modifications compared to standard CRC32 is that no initial and
final XOR is performed, and that the output is returned in
LSB-first order.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_md4
@anchor{shishi_md4}
@deftypefun {int} {shishi_md4} (Shishi * @var{handle}, const char * @var{in}, size_t @var{inlen}, char * @var{out[16]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{in}: input character array of data to hash.

@var{inlen}: length of input character array of data to hash.

Compute hash of data using MD4.  The @code{out} buffer must be
deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_md5
@anchor{shishi_md5}
@deftypefun {int} {shishi_md5} (Shishi * @var{handle}, const char * @var{in}, size_t @var{inlen}, char * @var{out[16]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{in}: input character array of data to hash.

@var{inlen}: length of input character array of data to hash.

Compute hash of data using MD5.  The @code{out} buffer must be
deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_hmac_md5
@anchor{shishi_hmac_md5}
@deftypefun {int} {shishi_hmac_md5} (Shishi * @var{handle}, const char * @var{key}, size_t @var{keylen}, const char * @var{in}, size_t @var{inlen}, char * @var{outhash[16]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{key}: input character array with key to use.

@var{keylen}: length of input character array with key to use.

@var{in}: input character array of data to hash.

@var{inlen}: length of input character array of data to hash.

Compute keyed checksum of data using HMAC-MD5.  The @code{outhash} buffer
must be deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_hmac_sha1
@anchor{shishi_hmac_sha1}
@deftypefun {int} {shishi_hmac_sha1} (Shishi * @var{handle}, const char * @var{key}, size_t @var{keylen}, const char * @var{in}, size_t @var{inlen}, char * @var{outhash[20]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{key}: input character array with key to use.

@var{keylen}: length of input character array with key to use.

@var{in}: input character array of data to hash.

@var{inlen}: length of input character array of data to hash.

Compute keyed checksum of data using HMAC-SHA1.  The @code{outhash}
buffer must be deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_des_cbc_mac
@anchor{shishi_des_cbc_mac}
@deftypefun {int} {shishi_des_cbc_mac} (Shishi * @var{handle}, const char @var{key[8]}, const char @var{iv[8]}, const char * @var{in}, size_t @var{inlen}, char * @var{out[8]})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{in}: input character array of data to hash.

@var{inlen}: length of input character array of data to hash.

Computed keyed checksum of data using DES-CBC-MAC.  The @code{out} buffer
must be deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_arcfour
@anchor{shishi_arcfour}
@deftypefun {int} {shishi_arcfour} (Shishi * @var{handle}, int @var{decryptp}, const char * @var{key}, size_t @var{keylen}, const char @var{iv[258]}, char * @var{ivout[258]}, const char * @var{in}, size_t @var{inlen}, char ** @var{out})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{decryptp}: 0 to indicate encryption, non-0 to indicate decryption.

@var{key}: input character array with key to use.

@var{keylen}: length of input key array.

@var{in}: input character array of data to encrypt/decrypt.

@var{inlen}: length of input character array of data to encrypt/decrypt.

@var{out}: newly allocated character array with encrypted/decrypted data.

Encrypt or decrypt data (depending on @code{decryptp}) using ARCFOUR.
The @code{out} buffer must be deallocated by the caller.

The "initialization vector" used here is the concatenation of the
sbox and i and j, and is thus always of size 256 + 1 + 1.  This is
a slight abuse of terminology, and assumes you know what you are
doing.  Don't use it if you can avoid to.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_des
@anchor{shishi_des}
@deftypefun {int} {shishi_des} (Shishi * @var{handle}, int @var{decryptp}, const char @var{key[8]}, const char @var{iv[8]}, char * @var{ivout[8]}, const char * @var{in}, size_t @var{inlen}, char ** @var{out})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{decryptp}: 0 to indicate encryption, non-0 to indicate decryption.

@var{in}: input character array of data to encrypt/decrypt.

@var{inlen}: length of input character array of data to encrypt/decrypt.

@var{out}: newly allocated character array with encrypted/decrypted data.

Encrypt or decrypt data (depending on @code{decryptp}) using DES in CBC
mode.  The @code{out} buffer must be deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_3des
@anchor{shishi_3des}
@deftypefun {int} {shishi_3des} (Shishi * @var{handle}, int @var{decryptp}, const char @var{key[8]}, const char @var{iv[8]}, char * @var{ivout[8]}, const char * @var{in}, size_t @var{inlen}, char ** @var{out})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{decryptp}: 0 to indicate encryption, non-0 to indicate decryption.

@var{in}: input character array of data to encrypt/decrypt.

@var{inlen}: length of input character array of data to encrypt/decrypt.

@var{out}: newly allocated character array with encrypted/decrypted data.

Encrypt or decrypt data (depending on @code{decryptp}) using 3DES in CBC
mode.  The @code{out} buffer must be deallocated by the caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_aes_cts
@anchor{shishi_aes_cts}
@deftypefun {int} {shishi_aes_cts} (Shishi * @var{handle}, int @var{decryptp}, const char * @var{key}, size_t @var{keylen}, const char @var{iv[16]}, char * @var{ivout[16]}, const char * @var{in}, size_t @var{inlen}, char ** @var{out})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{decryptp}: 0 to indicate encryption, non-0 to indicate decryption.

@var{key}: input character array with key to use.

@var{keylen}: length of input character array with key to use.

@var{in}: input character array of data to encrypt/decrypt.

@var{inlen}: length of input character array of data to encrypt/decrypt.

@var{out}: newly allocated character array with encrypted/decrypted data.

Encrypt or decrypt data (depending on @code{decryptp}) using AES in
CBC-CTS mode.  The length of the key, @code{keylen}, decide if AES 128 or
AES 256 should be used.  The @code{out} buffer must be deallocated by the
caller.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_pbkdf2_sha1
@anchor{shishi_pbkdf2_sha1}
@deftypefun {int} {shishi_pbkdf2_sha1} (Shishi * @var{handle}, const char * @var{P}, size_t @var{Plen}, const char * @var{S}, size_t @var{Slen}, unsigned int @var{c}, unsigned int @var{dkLen}, char * @var{DK})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{P}: input password, an octet string

@var{Plen}: length of password, an octet string

@var{S}: input salt, an octet string

@var{Slen}: length of salt, an octet string

@var{c}: iteration count, a positive integer

@var{dkLen}: intended length in octets of the derived key, a positive integer,
at most (2^32 - 1) * hLen.  The DK array must have room for this many
characters.

@var{DK}: output derived key, a dkLen-octet string

Derive key using the PBKDF2 defined in PKCS5.  PBKDF2 applies a
pseudorandom function to derive keys. The length of the derived key
is essentially unbounded. (However, the maximum effective search
space for the derived key may be limited by the structure of the
underlying pseudorandom function, which is this function is always
SHA1.)

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

