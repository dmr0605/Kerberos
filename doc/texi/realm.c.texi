@subheading shishi_realm_default_guess
@anchor{shishi_realm_default_guess}
@deftypefun {char *} {shishi_realm_default_guess} ( @var{void})

Guesses a realm based on @code{getdomainname()} (which really is NIS/YP
domain, but if it is set it might be a good guess), or if it fails,
based on @code{gethostname()}, or if it fails, the string
"could-not-guess-default-realm". Note that the hostname is not
trimmed off of the data returned by @code{gethostname()} to get the domain
name and use that as the realm.

@strong{Return value:} Returns guessed realm for host as a string that has
to be deallocated with @code{free()} by the caller.
@end deftypefun

@subheading shishi_realm_default
@anchor{shishi_realm_default}
@deftypefun {const char *} {shishi_realm_default} (Shishi * @var{handle})
@var{handle}: Shishi library handle create by @code{shishi_init()}.

Get name of default realm.

@strong{Return value:} Returns the default realm used in the library.  (Not
a copy of it, so don't modify or deallocate it.)
@end deftypefun

@subheading shishi_realm_default_set
@anchor{shishi_realm_default_set}
@deftypefun {void} {shishi_realm_default_set} (Shishi * @var{handle}, const char * @var{realm})
@var{handle}: Shishi library handle create by @code{shishi_init()}.

@var{realm}: string with new default realm name, or NULL to reset to default.

Set the default realm used in the library.  The string is copied
into the library, so you can dispose of the variable immediately
after calling this function.
@end deftypefun

@subheading shishi_realm_for_server_file
@anchor{shishi_realm_for_server_file}
@deftypefun {char *} {shishi_realm_for_server_file} (Shishi * @var{handle}, char * @var{server})
@var{handle}: Shishi library handle create by @code{shishi_init()}.

@var{server}: hostname to find realm for.

Find realm for a host using configuration file.

@strong{Return value:} Returns realm for host, or NULL if not found.
@end deftypefun

@subheading shishi_realm_for_server_dns
@anchor{shishi_realm_for_server_dns}
@deftypefun {char *} {shishi_realm_for_server_dns} (Shishi * @var{handle}, char * @var{server})
@var{handle}: Shishi library handle create by @code{shishi_init()}.

@var{server}: hostname to find realm for.

Find realm for a host using DNS lookups, according to
draft-ietf-krb-wg-krb-dns-locate-03.txt.  Since DNS lookups may be
spoofed, relying on the realm information may result in a
redirection attack.  In a single-realm scenario, this only achieves
a denial of service, but with cross-realm trust it may redirect you
to a compromised realm.  For this reason, Shishi prints a warning,
suggesting that the user should add the proper 'server-realm'
configuration tokens instead.

To illustrate the DNS information used, here is an extract from a
zone file for the domain ASDF.COM:

_kerberos.asdf.com.             IN      TXT     "ASDF.COM"
_kerberos.mrkserver.asdf.com.   IN      TXT     "MARKETING.ASDF.COM"
_kerberos.salesserver.asdf.com. IN      TXT     "SALES.ASDF.COM"

Let us suppose that in this case, a client wishes to use a service
on the host foo.asdf.com.  It would first query:

_kerberos.foo.asdf.com. IN TXT

Finding no match, it would then query:

_kerberos.asdf.com. IN TXT

@strong{Return value:} Returns realm for host, or NULL if not found.
@end deftypefun

@subheading shishi_realm_for_server
@anchor{shishi_realm_for_server}
@deftypefun {char *} {shishi_realm_for_server} (Shishi * @var{handle}, char * @var{server})
@var{handle}: Shishi library handle create by @code{shishi_init()}.

@var{server}: hostname to find realm for.

Find realm for a host, using various methods.  Currently this
includes static configuration files (see
@code{shishi_realm_for_server_file()}) and DNS (see
@code{shishi_realm_for_server_dns()}).

@strong{Return value:} Returns realm for host, or NULL if not found.
@end deftypefun

