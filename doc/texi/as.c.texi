@subheading shishi_as
@anchor{shishi_as}
@deftypefun {int} {shishi_as} (Shishi * @var{handle}, Shishi_as ** @var{as})
@var{handle}: shishi handle as allocated by @code{shishi_init()}.

@var{as}: holds pointer to newly allocate Shishi_as structure.

Allocate a new AS exchange variable.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_done
@anchor{shishi_as_done}
@deftypefun {void} {shishi_as_done} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Deallocate resources associated with AS exchange.  This should be
called by the application when it no longer need to utilize the AS
exchange handle.
@end deftypefun

@subheading shishi_as_req
@anchor{shishi_as_req}
@deftypefun {Shishi_asn1} {shishi_as_req} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Get ASN.1 AS-REQ structure from AS exchange.

@strong{Return value:} Returns the generated AS-REQ packet from the AS
exchange, or NULL if not yet set or an error occured.
@end deftypefun

@subheading shishi_as_req_build
@anchor{shishi_as_req_build}
@deftypefun {int} {shishi_as_req_build} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Possibly remove unset fields (e.g., rtime).

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_req_set
@anchor{shishi_as_req_set}
@deftypefun {void} {shishi_as_req_set} (Shishi_as * @var{as}, Shishi_asn1 @var{asreq})
@var{as}: structure that holds information about AS exchange

@var{asreq}: asreq to store in AS.

Set the AS-REQ in the AS exchange.
@end deftypefun

@subheading shishi_as_req_der
@anchor{shishi_as_req_der}
@deftypefun {int} {shishi_as_req_der} (Shishi_as * @var{as}, char ** @var{out}, size_t * @var{outlen})
@var{as}: structure that holds information about AS exchange

@var{out}: output array with newly allocated DER encoding of AS-REQ.

@var{outlen}: length of output array with DER encoding of AS-REQ.

DER encode AS-REQ.  @code{out} is allocated by this function, and it is
the responsibility of caller to deallocate it.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_req_der_set
@anchor{shishi_as_req_der_set}
@deftypefun {int} {shishi_as_req_der_set} (Shishi_as * @var{as}, char * @var{der}, size_t @var{derlen})
@var{as}: structure that holds information about AS exchange

@var{der}: input array with DER encoded AP-REQ.

@var{derlen}: length of input array with DER encoded AP-REQ.

DER decode AS-REQ and set it AS exchange.  If decoding fails, the
AS-REQ in the AS exchange remains.

@strong{Return value:} Returns SHISHI_OK.
@end deftypefun

@subheading shishi_as_rep
@anchor{shishi_as_rep}
@deftypefun {Shishi_asn1} {shishi_as_rep} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Get ASN.1 AS-REP structure from AS exchange.

@strong{Return value:} Returns the received AS-REP packet from the AS
exchange, or NULL if not yet set or an error occured.
@end deftypefun

@subheading shishi_as_rep_process
@anchor{shishi_as_rep_process}
@deftypefun {int} {shishi_as_rep_process} (Shishi_as * @var{as}, Shishi_key * @var{key}, const char * @var{password})
@var{as}: structure that holds information about AS exchange

@var{key}: user's key, used to encrypt the encrypted part of the AS-REP.

@var{password}: user's password, used if key is NULL.

Process new AS-REP and set ticket.  The key is used to decrypt the
AP-REP.  If both key and password is NULL, the user is queried for
it.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_rep_build
@anchor{shishi_as_rep_build}
@deftypefun {int} {shishi_as_rep_build} (Shishi_as * @var{as}, Shishi_key * @var{key})
@var{as}: structure that holds information about AS exchange

@var{key}: user's key, used to encrypt the encrypted part of the AS-REP.

Build AS-REP.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_rep_der
@anchor{shishi_as_rep_der}
@deftypefun {int} {shishi_as_rep_der} (Shishi_as * @var{as}, char ** @var{out}, size_t * @var{outlen})
@var{as}: structure that holds information about AS exchange

@var{out}: output array with newly allocated DER encoding of AS-REP.

@var{outlen}: length of output array with DER encoding of AS-REP.

DER encode AS-REP. @code{out} is allocated by this function, and it is
the responsibility of caller to deallocate it.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_rep_set
@anchor{shishi_as_rep_set}
@deftypefun {void} {shishi_as_rep_set} (Shishi_as * @var{as}, Shishi_asn1 @var{asrep})
@var{as}: structure that holds information about AS exchange

@var{asrep}: asrep to store in AS.

Set the AS-REP in the AS exchange.
@end deftypefun

@subheading shishi_as_rep_der_set
@anchor{shishi_as_rep_der_set}
@deftypefun {int} {shishi_as_rep_der_set} (Shishi_as * @var{as}, char * @var{der}, size_t @var{derlen})
@var{as}: structure that holds information about AS exchange

@var{der}: input array with DER encoded AP-REP.

@var{derlen}: length of input array with DER encoded AP-REP.

DER decode AS-REP and set it AS exchange.  If decoding fails, the
AS-REP in the AS exchange remains.

@strong{Return value:} Returns SHISHI_OK.
@end deftypefun

@subheading shishi_as_krberror
@anchor{shishi_as_krberror}
@deftypefun {Shishi_asn1} {shishi_as_krberror} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Get ASN.1 KRB-ERROR structure from AS exchange.

@strong{Return value:} Returns the received KRB-ERROR packet from the AS
exchange, or NULL if not yet set or an error occured.
@end deftypefun

@subheading shishi_as_krberror_der
@anchor{shishi_as_krberror_der}
@deftypefun {int} {shishi_as_krberror_der} (Shishi_as * @var{as}, char ** @var{out}, size_t * @var{outlen})
@var{as}: structure that holds information about AS exchange

@var{out}: output array with newly allocated DER encoding of KRB-ERROR.

@var{outlen}: length of output array with DER encoding of KRB-ERROR.

DER encode KRB-ERROR. @code{out} is allocated by this function, and it is
the responsibility of caller to deallocate it.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_krberror_set
@anchor{shishi_as_krberror_set}
@deftypefun {void} {shishi_as_krberror_set} (Shishi_as * @var{as}, Shishi_asn1 @var{krberror})
@var{as}: structure that holds information about AS exchange

@var{krberror}: krberror to store in AS.

Set the KRB-ERROR in the AS exchange.
@end deftypefun

@subheading shishi_as_tkt
@anchor{shishi_as_tkt}
@deftypefun {Shishi_tkt *} {shishi_as_tkt} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Get Ticket in AS exchange.

@strong{Return value:} Returns the newly aquired tkt from the AS
exchange, or NULL if not yet set or an error occured.
@end deftypefun

@subheading shishi_as_tkt_set
@anchor{shishi_as_tkt_set}
@deftypefun {void} {shishi_as_tkt_set} (Shishi_as * @var{as}, Shishi_tkt * @var{tkt})
@var{as}: structure that holds information about AS exchange

@var{tkt}: tkt to store in AS.

Set the Tkt in the AS exchange.
@end deftypefun

@subheading shishi_as_sendrecv_hint
@anchor{shishi_as_sendrecv_hint}
@deftypefun {int} {shishi_as_sendrecv_hint} (Shishi_as * @var{as}, Shishi_tkts_hint * @var{hint})
@var{as}: structure that holds information about AS exchange

@var{hint}: additional parameters that modify connection behaviour, or @code{NULL}.

Send AS-REQ and receive AS-REP or KRB-ERROR.  This is the initial
authentication, usually used to acquire a Ticket Granting Ticket.
The @code{hint} structure can be used to set, e.g., parameters for TLS
authentication.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

@subheading shishi_as_sendrecv
@anchor{shishi_as_sendrecv}
@deftypefun {int} {shishi_as_sendrecv} (Shishi_as * @var{as})
@var{as}: structure that holds information about AS exchange

Send AS-REQ and receive AS-REP or KRB-ERROR.  This is the initial
authentication, usually used to acquire a Ticket Granting Ticket.

@strong{Return value:} Returns SHISHI_OK iff successful.
@end deftypefun

